import os
import sys

sys.path.append(f'/Users/gorobtsov/Desktop/bot_tg/keyboard')
sys.path.append(f'/Users/gorobtsov/Desktop/bot_tg/settings')
sys.path.append(f'/Users/gorobtsov/Desktop/bot_tg/database')

from keyboard import keyboard_start, keyboard_main, keyboard_admin, keyboard_mailing
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher import FSMContext
from aiogram.types import Message
from config import token, MAIN_ADMIN
from database import db


bot = Bot(token=token)

dp = Dispatcher(bot=bot, storage=MemoryStorage())


class FormState(StatesGroup):
    waiting_for_message = State()

class FormAdminMailing(StatesGroup):
    text = State()
    photo = State()
    confirmation = State()

# –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫ –ª—é–¥–µ–π
@dp.chat_join_request_handler()
async def start_message(update: types.ChatJoinRequest):
    # —Ç—É—Ç –º—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —é–∑–µ—Ä–∞ –≤ –∫–∞–Ω–∞–ª
    await update.approve()
    # –∞ —Ç—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(chat_id=update.from_user.id, text="""                           
<b>–ü—Ä–∏–≤–µ—Ç, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª!</b>

–Ø –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ —Ñ–∏–Ω–∞–Ω—Å—ã –∏ —ç–∫–æ–Ω–æ–º–∏–∫—É 

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ –≤—ã –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É
<b>¬´–Ø —á–µ–ª–æ–≤–µ–∫¬ª</b>
–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ.""", parse_mode='HTML', reply_markup=keyboard_start)
    

# –ß–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
@dp.message_handler()
async def message_from_user(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    db.check_user(telegram_id=user_id, username=username)
    check_user_id = db.check_user_id(telegram_id=user_id)[0][0]
    check_user = db.check_admin(telegram_id=check_user_id)
    if check_user == []:
        await message.answer("–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å", reply_markup=keyboard_main)
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=keyboard_admin)


# –ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø —á–µ–ª–æ–≤–µ–∫"
@dp.message_handler(text='–Ø —á–µ–ª–æ–≤–µ–∫ üôã')
async def start_message_human(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    db.check_user(telegram_id=user_id, username=username)
    await bot.send_message(message.chat.id, text="""
<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏!</b> 
""", parse_mode='HTML', reply_markup=keyboard_main)
    
# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫"
@dp.message_handler(text='–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ üé≤')
async def cubik(message: Message):
    await bot.send_dice(message.chat.id)

# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º"
@dp.message_handler(text='–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º üìû')
async def say_admin(message: Message):
    telegram_id = message.from_user.id
    check_user_id = db.check_user_id(telegram_id=telegram_id)[0][0]
    check_user = db.check_admin(telegram_id=check_user_id)
    if check_user == []:
        await FormState.waiting_for_message.set()
        await bot.send_message(message.chat.id, """                               
–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:
                               
–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –≤–∏–¥–µ–æ—Ñ–æ—Ä–º–∞—Ç –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –±–æ—Ç –∏—Ö –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç.
""")
    else:
        await bot.send_message(message.chat.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ :)", reply_markup=keyboard_admin)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=FormState.waiting_for_message, content_types=types.ContentTypes.TEXT)
async def process_message(message: types.Message, state: FSMContext):
    try:
        user_message = message.text
        await bot.send_message(MAIN_ADMIN, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name} (ID: {message.from_user.id} | username: @{message.from_user.username}):\n\n{user_message}")
        await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.finish()
        
    except Exception as ex:
        await bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=keyboard_main)
        await state.finish()

@dp.message_handler(commands=['start'])
async def start_command(message: Message):
    telegram_id = message.from_user.id
    check_user_id = db.check_user_id(telegram_id=telegram_id)[0][0]
    check_user = db.check_admin(telegram_id=check_user_id)
    if check_user == []:
        await message.answer("–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å", reply_markup=keyboard_main)
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=keyboard_admin)

# --- –†–ê–°–°–´–õ–ö–ê ---
# –ö–Ω–æ–ø–∫–∞: —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞
@dp.message_handler(text='–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üí¨')
async def mailing(message: types.Message):
    telegram_id = message.from_user.id
    check_user_id = db.check_user_id(telegram_id=telegram_id)[0][0]
    check_user = db.check_admin(telegram_id=check_user_id)
    if check_user == []:
        await message.answer('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!', reply_markup=keyboard_start)
    else:
        await FormAdminMailing.text.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

@dp.message_handler(state=FormAdminMailing.text)
async def mailing_process_text(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
    await FormAdminMailing.photo.set()
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å):")

@dp.message_handler(state=FormAdminMailing.photo, content_types=types.ContentTypes.PHOTO)
async def mailing_process_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        async with state.proxy() as data:
            data['photo'] = message.photo[0].file_id
        await send_confirmation(message.chat.id, data.get('text'), True, data)
    except Exception as ex:
        await FormAdminMailing.photo.set()
        await message.answer(f"""
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ä–∞–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
""")
        

@dp.message_handler(state=FormAdminMailing.photo, content_types=types.ContentTypes.TEXT)
async def mailing_process_no_photo(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–µ—Ç':
        data = await state.get_data()
        text = data.get('text')
        await send_confirmation(message.chat.id, text, False, data)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç'.")


async def send_confirmation(chat_id, text, has_photo, data):    
    if has_photo:
        await bot.send_photo(chat_id, photo=data.get('photo'), caption=text, reply_markup=keyboard_mailing)
        await FormAdminMailing.confirmation.set()
    else:
        await bot.send_message(chat_id, text=text, reply_markup=keyboard_mailing)
        await FormAdminMailing.confirmation.set()


@dp.callback_query_handler(text=['confirm_mailing', 'cancel_mailing'], state=FormAdminMailing.confirmation)
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get('text')
    photo = data.get('photo')

    if callback_query.data == 'confirm_mailing':
        users = db.get_all_users()
        for user_id in users:
            try:
                if photo:
                    await bot.send_photo(user_id[1], photo=photo, caption=text)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º photo
                else:
                    await bot.send_message(user_id[1], text)
            except Exception as ex:
                continue
        
        await bot.send_message(callback_query.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await state.finish()
    
    else:
        await bot.send_message(callback_query.from_user.id, text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=keyboard_admin)
        await state.finish()


# --- –°–¢–ê–¢–ò–°–¢–ò–ö–ê ---
# –ù–∞–∂–∞—Ç–∏–µ –∞–¥–º–∏–Ω–æ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message_handler(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä')
async def statistics_command(message: types.Message):
    telegram_id = message.from_user.id
    check_user_id = db.check_user_id(telegram_id=telegram_id)[0][0]
    check_user = db.check_admin(telegram_id=check_user_id)
    if check_user == []:
        await message.answer('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!', reply_markup=keyboard_start)
    else:
        all_users = len(db.get_all_users())
        all_admins = len(db.get_all_admins())

        await message.answer(f'''
–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê:
–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {all_users}
–í—Å–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {all_admins}                          
''')

if __name__ == '__main__':
    executor.start_polling(dispatcher=dp, skip_updates=True)